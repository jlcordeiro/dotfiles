#===============================================================================
# PyTyle - A manual tiling manager
# Copyright (C) 2009  Andrew Gallant <andrew@pytyle.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#===============================================================================
#------------------------------------------------------------------------------
# MISCELLANEOUS OPTIONS
#------------------------------------------------------------------------------
Config.MISC = {
               'tilers': ['Vertical', 'Horizontal', 'HorizontalRows', 'Maximal', 'Cascade'],
               'global_tiling': False,
               'timeout': 0.3,
               'decorations': False,
               'original_decor': True,
               }


#------------------------------------------------------------------------------
# KEY BINDINGS
#------------------------------------------------------------------------------

# Key binding format:
# [Alt-][Shift-][Ctrl-][Super-]KEY
#
Config.KEYMAP = {

                 'Alt-A': 'tile.default',
                 #'Alt-Ctrl-H': 'tile.Horizontal',
                 #'Alt-Ctrl-M': 'tile.Maximal',
                 #'Alt-Ctrl-C': 'tile.Cascade',
                 'Alt-U': 'untile',
                 'Alt-Z': 'cycle_tiler',
                 'Alt-Q': 'reload',
                 'Alt-Shift-space': 'reset',
                 'Alt-C': 'cycle',
                 'Alt-H': 'master_decrease',
                 'Alt-L': 'master_increase', 
                 'Alt-period': 'add_master',
                 'Alt-comma': 'remove_master',
                 'Alt-Return': 'make_active_master',
                 'Alt-M': 'win_master',
                 'Alt-Shift-J': 'switch_previous',
                 'Alt-Shift-K': 'switch_next',

                 'Alt-W': 'screen0_focus',
                 'Alt-E': 'screen1_focus',
                 'Alt-R': 'screen2_focus',
                 'Alt-Shift-W': 'screen0_put',
                 'Alt-Shift-E': 'screen1_put',
                 'Alt-Shift-R': 'screen2_put',
                 'Alt-Shift-C': 'win_close', 
                 'Alt-J': 'win_previous',
                 'Alt-K': 'win_next',
                 

                 }


#------------------------------------------------------------------------------
# DOCKS, PANELS, ETC...
#------------------------------------------------------------------------------

# This will allow you to forcefully tell PyTyle about any docks/panels that
# you may have. If you have a basic setup (read: one screen), then I would
# advise that you ignore this for now, and only configure this if you notice
# that PyTyle is putting windows over your docks/panels.
#
# However, if you have two or more screens and have docks/panels, you *MUST*
# configure this, otherwise PyTyle will use the entirety of your screens.
# The problem here is that with xinerama, it's only going to tell you the
# x/y/width/height of each screen, and the window manager isn't much more
# help. (Especially since they aren't required to broadcast their struts
# or partial struts, to my knowledge. If I had that information, I might be
# able to eliminate this configuration.)
#
# The configuration is pretty straight-forward. See the commented out example
# for a sample. (Which will create even margins around the tiling windows
# for two screens. It's actually kind of neat looking. Try it.)
#
# Note: If you have this set and you only have one screen, it will override
# the workarea reported by your window manager.
Config.WORKAREA = {}

# Pretty straight forward here. Just use the screen number as your key,
# (starting from zero) and specify *all four* of the configuration 
# options: top, bottom, left, and right. Each value should be the number 
# of pixels from the edge of the screen that PyTyle should ignore.
#Config.WORKAREA = {                   
#                   0: {
#                       'top': 100,
#                       'bottom': 100,
#                       'left': 100,
#                       'right': 100,
#                       },
#                   1: {
#                       'top': 200,
#                       'bottom': 200,
#                       'left': 200,
#                       'right': 200,
#                       }, 
#                   }


#------------------------------------------------------------------------------
# IGNORE WINDOW LIST
#------------------------------------------------------------------------------

# This is a simple list of windows that PyTyle should exclude from
# tiling. It's case-insensitive and will search the name and class
# of the window. (This search algorithm could change, as I haven't 
# put much thought into it.)
#
# Note: This is useful for things like run dialogs and other quick
# popups that PyTyle can't detect. (It will, however, detect popups
# within other windows.) Also useful for applications like Gimp.
#
# Note 2: You shouldn't need to put dmenu here.
Config.FILTER = [
               'gmrun', 'gimp', 'download',
               ]


#------------------------------------------------------------------------------
# LAYOUT SPECIFIC OPTIONS
#------------------------------------------------------------------------------

# Sometimes layouts can be tweaked slightly to better suit your
# tastes. For example, width/height factors. See the example
# below for instructions on how to configure your layout.
#
# Note: Not every layout will have configuration options.
Config.LAYOUT = {
                 'Vertical': {
                              # The default width factor. This is used when
                              # the screen is initially tiled (or reset).
                              # Possible values: 0 < x <= 1.0
                              'width_factor': 0.5,
                              },
                              
                 'Horizontal': {
                                # The default height factor. This is used
                                # when the screen is initialled tiled (or
                                # reset). Possible values:
                                # 0 < y <= 1.0
                                'height_factor': 0.5,
                                },
                                
                 'Maximal': {
                             # Nothing here yet... Are there any options for
                             # Maximal? (True full screen? i.e., overlap panels
                             # and docks?)
                             },

                 'Cascade': {
                             # This will be determined automatically,
                             # but in case the windows aren't
                             # "cascading", you might need to set this
                             # differently.
                             'decoration_height': 25,
                             
                             # Determines the width of the windows relative
                             # to the screen width. Possible
                             # values: 0 < x <= 1.0
                             'width_factor': 1.0,
                             
                             # Determines the height of the windows relative
                             # to the screen height. Possible
                             # values: 0 < y <= 1.0
                             'height_factor': 1.0,
                             
                             # The number of pixels to "push" each subsequent
                             # window over. (Automatically adjusts itself
                             # for horizontal alignment.)
                             'push_over': 0,
                             
                             # Determines the horizontal alignment of the
                             # cascading windows. Possible
                             # values are "left" or "right".
                             'horz_align': 'left',
                             },
                             
                  # Default settings for the "HorizontalRows" layout.
                  'HorizontalRows': {
                                     # The default height factor. This is used
                                     # when the screen is initialled tiled (or
                                     # reset). Possible values:
                                     # 0 < y <= 1.0
                                     'height_factor': 0.5,
                                
                                     # Simply sets how many windows to have
                                     # in each row.
                                     'row_size': 2,
                                     },
                
                  # An example of a perhaps more "traditional" cascading 
                  # layout that uses smaller windows.
                  #
                  # Note: If you need to have multiple cascading layouts
                  # simultaneously, you'll need to create your own layout.
                  # Quickly:
                  #    1. Create your tiling class, say Tilers/MyCascade.py.
                  #    2. Copy the contents of Tilers/Cascade.py into your
                  #       new file.
                  #    3. Change *all* instances of "Cascade" to "MyCascade"
                  #       or whatever you named your layout.
                  #    4. Add your new tiler to the list above.
                  #    5. Add a new section here of configuration options
                  #       for your new cascading layout.
#                 'Cascade': {
#                             'decoration_height': 25,
#                             'width_factor': 0.5,
#                             'height_factor': 0.5,
#                             'push_over': 25,
#                             'horz_align': 'left',
#                             }
                 }


#------------------------------------------------------------------------------
# TILING PER WORKSPACE/SCREEN
#------------------------------------------------------------------------------

# This will let you configure the default tiling algorithms on a
# per screen per workspace basis. A default tiler must be set.
# Also, see the commented out configuration for an example.
#
# Remember: You can always cycle through the different tiling
# algorithms after the initial tile.
Config.TILING = {
               'default': 'Vertical',
               }

# This configuration sets the default tiler to "Vertical", and the
# default tiler of Screen 1 to "Horizontal" (so all desktops on
# Screen 1 will have a horizontal layout at first). Also, this will
# set the default layout on Screen 0 for desktops 4 and 6 to
# "Horizontal".
#
# Note: Screen and desktop numbers start from 0. So desktop 4 should
# be configured using "3" below.
#
# Take note of the following desktop/viewport numbering scheme:
# One row: 0 1 2 3
# Multiple rows:
# 0 1 2
# 3 4 5
# 6 7 8
#Config.TILING = {
#                 'default': 'Vertical',
#                 0: {
#                       5: 'Horizontal',
#                       7: 'Horizontal',
#                    },
#                 1: 'Horizontal',
#                 }
