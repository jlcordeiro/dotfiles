PROJECT(dai)
CMAKE_MINIMUM_REQUIRED(VERSION 2.4.5)

ADD_DEFINITIONS(${QT_DEFINITIONS})


INCLUDE( ~/Dropbox/brisa/src/FindOpenCV.cmake )
INCLUDE( /usr/share/cmake-2.6/Modules/FindQt4.cmake )
FIND_PACKAGE(OpenCV REQUIRED)
FIND_PACKAGE(Qt4 REQUIRED) # find and setup Qt3 for this project
include(${QT_USE_FILE})
# ######### General setup ##########
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})
INCLUDE_DIRECTORIES(${OPENCV_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${QT_INCLUDE_DIR} ${QT_INCLUDE_PATH} ${QT_QTCORE_INCLUDE_DIR}) # tell cmake where to search for Qt/KDE headers
INCLUDE_DIRECTORIES(${QT_QTNETWORK_INCLUDE_DIR} ${QT_QTTEST_INCLUDE_DIR})

SET(dai_SRCS  
    listalig.cpp
    DAIEvent.cpp
    VCEvent.cpp
    wrongblobs.cpp
    tracker.cpp
    mog.cpp
    labelist.cpp
    codebook.cpp
    opencv.cpp
    misc.cpp
    count.cpp
    RectificaImagem.cpp
    DAIEventHandler.cpp
    graphics.cpp
    AppearenceBased.cpp
    matrix_util.cpp
    ErrorHandler.cpp
    blobslist.cpp
    segmentation.cpp
    stoppedcars.cpp
    CovarianceDescriptor.cpp
    DAIConfigParam.cpp
    capture.cpp
    dai_lib.cpp
    videothread.cpp
    VelocityTracker.cpp
    DAILib.cpp
    Mask.cpp
    codeword.cpp
    TimeFunctions.cpp
    wrongway.cpp
    ImageBuffer.cpp
)

SET(dai_HDRS  
    graphics.h
    matrix_util.h
    codeword.h
    ImageBuffer.h
    DAILib.h
    ErrorHandler.h
    VCEvent.h
    segmentation.h
    DAIEventHandler.h
    opencv.h
    blobslist.h
    IDAILib.h
    capture.h
    wrongblobs.h
    TimeFunctions.h
    misc.h
    count.h
    tracker.h
    videothread.h
    codebook.h
    mog.h
    defines.h
    listalig.h
    RectificaImagem.h
    imageacess.h
    labelist.h
    CovarianceDescriptor.h
    wrongway.h
    Mask.h
    DAIConfigParam.h
    stoppedcars.h
    DAIEvent.h
)

SET(foo_SRCS
  graphics.cpp
)

SET(foo_MOC_HDRS
  graphics.h
)

# After this call, foo_MOC_SRCS = moc_Class1.cxx moc_Class2.cxx moc_Class3.cxx.
QT4_WRAP_CPP(foo_MOC_SRCS ${foo_MOC_HDRS})

ADD_EXECUTABLE(dai ${foo_SRCS} ${foo_MOC_SRCS} ${dai_SRCS})


LINK_LIBRARIES (${QT_QT_LIBRARY})
TARGET_LINK_LIBRARIES(dai ${QT_LIBRARIES} ${OPENCV_LIBRARIES} ${QT_QTNETWORK_LIBRARIES}
   ${QT_QTTEST_LIBRARIES}
)


INSTALL(TARGETS dai DESTINATION ./) # add install target:
