#ifndef TEACHPLAY_HPP
#define TEACHPLAY_HPP


// System Include files:
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>
#include <pthread.h> // threads, mutexes
#include <string>
#include <iostream>
#include <fstream>
// #include <pthread.h>

//Local Include files:
#include "mrrobot.h"
#include "fileread.h"
#include "definitions.h"
#include "aobcold.hpp"

// Local defines:

#define DEFAULT_TEACH_FILE "teachFile.txt"
#define DEFAULT_PLAY_RESULTS_FILE "q_tau_file_wamsim.txt"

#define QD_CUT_FREQ 30.0
#define REF_CUT_FREQ 10.0

#define DATACQUISITIONTIME h // in seconds the nin is h
#define DATAREPRODUCTIONTIME DATACQUISITIONTIME // in seconds the nin is h

#define GOHOME_VELOCITY 15.0/180.0*PI    //rad/s
#define MIN_ERROR 0.5/180.0*PI           //rads

const char fast_controlerConfFileNames[][30]={
    "joint_Controler.cfg", ///config file name for joint nº1 controler
    "joint_Controler.cfg", ///config file name for joint nº2 controler
    "joint_Controler.cfg", ///config file name for joint nº3 controler
    "joint_Controler.cfg", ///config file name for joint nº4 controler
    "joint_Controler.cfg", ///config file name for joint nº5 controler
    "joint_Controler.cfg", ///config file name for joint nº6 controler
    "joint_Controler.cfg"  ///config file name for joint nº7 controler
};

// const char slow_controlerConfFileNames[][30]={
// 					"joint_Controler.cfg_slow", ///config file name for joint nº1 controler
//  					"joint_Controler.cfg_slow", ///config file name for joint nº1 controler
//  					"joint_Controler.cfg_slow", ///config file name for joint nº1 controler
//  					"joint_Controler.cfg_slow", ///config file name for joint nº1 controler
//  					"joint_Controler.cfg_slow", ///config file name for joint nº1 controler
//  					"joint_Controler.cfg_slow", ///config file name for joint nº1 controler
//  					"joint_Controler.cfg_slow", ///config file name for joint nº1 controler
// 					};


const char aobName[][10]={
    "aob1.", /// name from aob for joint nº1 controler
    "aob2.", /// name from aob for joint nº2 controler
    "aob3.", /// name from aob for joint nº3 controler
    "aob4.", /// name from aob for joint nº4 controler
    "aob5.", /// name from aob for joint nº5 controler
    "aob6.", /// name from aob for joint nº6 controler
    "aob7."  /// name from aob for joint nº7 controler
};


class TeachPlay
{
    public:
        TeachPlay(Real q_matrix[DOF], Real tau_matrix[DOF], Real g_vector[3], const Real sample_time);

        ~TeachPlay();


        void control_it();

        bool loadControlFiles(); ///BUG: when reload fails never reloads properly again


        void toggleAppState();
        bool isAppActive();


        enum results {error=-1, nothingdone, success};

        results enableTeach();
        results enablePlay();

        results disableTeach();
        results disablePlay();

        enum action {teach, play, none};

        action getAction();
    private:


        // Flags:
        bool active;
        action currentAction;
        // Mutex:

        // Auxiliar Variables:



        AOBcold *joint_controler_fast[DOF],
                //   			*joint_controler_slow[DOF],
                **controler_in_use;
        bool controlers_correctly_loaded;

        gsl_vector_view	tau_view,
                        q_view,
                        qd_view;

        gsl_vector	*x_state_ini,
                    *tau_star;
        Real	const h;

        Real	*q,
                qd[DOF],
                qi[DOF],
                **refTab,
                controler_ref[DOF],
                alpha_ref,
                alpha_qd,
                ref_filtered[DOF],
                qd_filtered[DOF];

        int	refTabSize,
            ref2control_idx;

        int	ncycles2recordSamples,
            ncycles2reproduceSamples;

        long long int currentcyclenumber;
        MRRobot robot;


        std::string	teachFname,
            PlayResultsFname;


        std::fstream teachFile;
        std::ofstream playResultsFile;

        //auxiliar functions:
        bool prepare4teach();
        bool prepare4play();
        bool finishteach();
        bool finishplay();

        void save_data();
        void reproduce_data();

        bool readReferences4table();
        void initialize_controlers(AOBcold **controler,Real ref[DOF]);

    protected:
        pthread_mutex_t internal_variables_mutex;
};
#endif

